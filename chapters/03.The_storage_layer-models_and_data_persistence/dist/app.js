// Generated by CoffeeScript 1.6.3
(function() {
  var BaseController, BaseModel, BaseView, CategoryController, CategoryEditorView, CategoryItemView, CategoryListView, CategoryModel, DocumentController, DocumentEditorView, DocumentItemView, DocumentListView, DocumentModel, Router, Storage, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Models = {};

  this.Controllers = {};

  this.Views = {};

  $(function() {
    return $("#sidebar a").on("click", function(event) {
      var route;
      event.preventDefault();
      route = $(event.currentTarget).attr("href");
      return Router.call(route);
    });
  });

  BaseController = (function() {
    function BaseController() {}

    return BaseController;

  })();

  Controllers.BaseController = BaseController;

  CategoryController = (function(_super) {
    __extends(CategoryController, _super);

    function CategoryController() {
      _ref = CategoryController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return CategoryController;

  })(Controllers.BaseController);

  Controllers.CategoryController = CategoryController;

  DocumentController = (function(_super) {
    __extends(DocumentController, _super);

    function DocumentController() {
      _ref1 = DocumentController.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return DocumentController;

  })(Controllers.BaseController);

  Controllers.DocumentController = DocumentController;

  BaseModel = (function() {
    function BaseModel(key) {
      this.key = key;
      this.data = Storage.get(this.key) || {};
    }

    BaseModel.prototype.all = function() {
      return this.data;
    };

    BaseModel.prototype.create = function(record) {
      if (!this.data[record.id]) {
        this.data[record.id] = record;
        this.persist();
        return true;
      }
      return false;
    };

    BaseModel.prototype.read = function(id) {
      if (this.data[id]) {
        return this.data[id];
      }
      return false;
    };

    BaseModel.prototype.update = function(record) {
      if (this.data[record.id]) {
        this.data[record.id] = record;
        this.persist();
        return true;
      }
      return false;
    };

    BaseModel.prototype["delete"] = function(id) {
      if (this.data[id]) {
        this.data[id] = null;
        delete this.data[id];
        this.persist();
        return true;
      }
      return false;
    };

    BaseModel.prototype.persist = function() {
      return Storage.set(this.key, this.data);
    };

    return BaseModel;

  })();

  Models.BaseModel = BaseModel;

  CategoryModel = (function(_super) {
    __extends(CategoryModel, _super);

    function CategoryModel() {
      CategoryModel.__super__.constructor.call(this, "category");
    }

    return CategoryModel;

  })(Models.BaseModel);

  Models.CategoryModel = CategoryModel;

  DocumentModel = (function(_super) {
    __extends(DocumentModel, _super);

    function DocumentModel() {
      DocumentModel.__super__.constructor.call(this, "document");
    }

    return DocumentModel;

  })(Models.BaseModel);

  Models.DocumentModel = DocumentModel;

  Router = (function() {
    function Router() {}

    return Router;

  })();

  this.Router = Router;

  Storage = (function() {
    function Storage() {}

    Storage.get = function(key) {
      return JSON.parse(localStorage.getItem(key));
    };

    Storage.set = function(key, value) {
      return localStorage.setItem(key, JSON.stringify(value));
    };

    return Storage;

  })();

  this.Storage = Storage;

  BaseView = (function() {
    function BaseView(element, template) {
      this.element = element;
      this.template = template;
    }

    BaseView.prototype.render = function(data) {
      return this.element.html(this.template(data));
    };

    return BaseView;

  })();

  Views.BaseView = BaseView;

  CategoryEditorView = (function(_super) {
    __extends(CategoryEditorView, _super);

    function CategoryEditorView() {
      _ref2 = CategoryEditorView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return CategoryEditorView;

  })(Views.BaseView);

  Views.CategoryEditorView = CategoryEditorView;

  CategoryItemView = (function(_super) {
    __extends(CategoryItemView, _super);

    function CategoryItemView() {
      _ref3 = CategoryItemView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return CategoryItemView;

  })(Views.BaseView);

  Views.CategoryItemView = CategoryItemView;

  CategoryListView = (function(_super) {
    __extends(CategoryListView, _super);

    function CategoryListView() {
      _ref4 = CategoryListView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    return CategoryListView;

  })(Views.BaseView);

  Views.CategoryListView = CategoryListView;

  DocumentEditorView = (function(_super) {
    __extends(DocumentEditorView, _super);

    function DocumentEditorView() {
      _ref5 = DocumentEditorView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return DocumentEditorView;

  })(Views.BaseView);

  Views.DocumentEditorView = DocumentEditorView;

  DocumentItemView = (function(_super) {
    __extends(DocumentItemView, _super);

    function DocumentItemView() {
      _ref6 = DocumentItemView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    return DocumentItemView;

  })(Views.BaseView);

  Views.DocumentItemView = DocumentItemView;

  DocumentListView = (function(_super) {
    __extends(DocumentListView, _super);

    function DocumentListView() {
      _ref7 = DocumentListView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return DocumentListView;

  })(Views.BaseView);

  Views.DocumentListView = DocumentListView;

}).call(this);
